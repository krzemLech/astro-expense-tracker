---
import AddBtn from "./AddBtn.astro";
import Input from "./Input.astro";
import { actions } from "astro:actions";
import ResetFormBtn from "./ResetFormBtn.astro";
import { formatDbDate } from "@/lib/dates";

type FormFields = {
  title: string;
  amount: string;
  message: string;
};

let errors = {
  title: "",
  amount: "",
  message: "",
} as FormFields;

const { selectedDate, daysBack } = Astro.props as {
  selectedDate: Date;
  daysBack: number;
};

// redirects and errors
const result = Astro.getActionResult(actions.addExpense);
if (result?.error?.status === 400) {
  //@ts-ignore-next-line
  errors.title = result.error.fields.title;
  //@ts-ignore-next-line
  errors.amount = result.error.fields.amount;
}
if (result?.error?.status === 500) {
  errors.message = result.error.message;
}

// computed
const isError = Object.values(errors).some((err) => err !== "");
const dbDate = formatDbDate(selectedDate);
---

<div class="border-t border-b border-zinc-600 bg-zinc-900 mt-4 p-4 relative">
  {isError && <ResetFormBtn />}
  <form class="flex gap-4" method="POST" action={actions.addExpense}>
    <Input label="title" placeholder="..." error={errors.title} />
    <Input label="amount" placeholder="$" half error={errors.amount} />
    <Input label="createdAt" value={dbDate} hidden />
    <Input label="day" value={daysBack} hidden />
    <div class="pt-8">
      <AddBtn />
    </div>
    <p class="absolute bottom-3 h-2.5 text-red-500 text-xs font-extralight">
      {errors.message}
    </p>
  </form>
</div>
